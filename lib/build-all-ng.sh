#!/bin/bash

if [[ $BETA == "yes" ]]; then STABILITY="beta";	else STABILITY="stable"; fi

buildall_start=$(date +%s)
n=0
buildlistcount=$(cat ${SRC}/config/targets.conf|grep $STABILITY | wc -l)
while read line; do

	[[ "$line" =~ ^#.*$ ]] && continue

	unset LINUXFAMILY LINUXCONFIG KERNELDIR KERNELSOURCE KERNELBRANCH BOOTDIR BOOTSOURCE BOOTBRANCH ARCH UBOOT_USE_GCC \
	KERNEL_USE_GCC DEFAULT_OVERLAYS CPUMIN CPUMAX UBOOT_VER KERNEL_VER GOVERNOR BOOTSIZE BOOTFS_TYPE UBOOT_TOOLCHAIN \
	KERNEL_TOOLCHAIN PACKAGE_LIST_EXCLUDE KERNEL_IMAGE_TYPE write_uboot_platform family_tweaks family_tweaks_bsp \
	setup_write_uboot_platform uboot_custom_postprocess atf_custom_postprocess family_tweaks_s BOOTSCRIPT UBOOT_TARGET_MAP \
	LOCALVERSION UBOOT_COMPILER KERNEL_COMPILER BOOTCONFIG BOOTCONFIG_VAR_NAME BOOTCONFIG_DEFAULT BOOTCONFIG_NEXT \
	BOOTCONFIG_DEV MODULES MODULES_NEXT MODULES_DEV INITRD_ARCH BOOTENV_FILE BOOTDELAY MODULES_BLACKLIST \
	MODULES_BLACKLIST_NEXT ATF_TOOLCHAIN2 MODULES_BLACKLIST_DEV MOUNT SDCARD BOOTPATCHDIR KERNELPATCHDIR buildtext \
	RELEASE IMAGE_TYPE OVERLAY_PREFIX ASOUND_STATE ATF_COMPILER ATF_USE_GCC ATFSOURCE ATFDIR ATFBRANCH ATFSOURCEDIR \
	PACKAGE_LIST_RM NM_IGNORE_DEVICES DISPLAY_MANAGER family_tweaks_bsp_s CRYPTROOT_ENABLE CRYPTROOT_PASSPHRASE \
	CRYPTROOT_SSH_UNLOCK CRYPTROOT_SSH_UNLOCK_PORT CRYPTROOT_SSH_UNLOCK_KEY_NAME ROOT_MAPPER NETWORK HDMI USB WIRELESS \
	ARMBIANMONITOR DEFAULT_CONSOLE FORCE_BOOTSCRIPT_UPDATE SERIALCON UBOOT_TOOLCHAIN2 toolchain2 BUILD_REPOSITORY_URL \
	BUILD_REPOSITORY_COMMIT DESKTOP_AUTOLOGIN BUILD_MINIMAL

	read -r BOARD BRANCH RELEASE BUILD_TARGET BUILD_STABILITY <<< "${line}"

	BUILD_DESKTOP="no"
	BUILD_MINIMAL="no"

	[[ ${BUILD_TARGET} == "desktop" ]] && BUILD_DESKTOP="yes"
	[[ ${BUILD_TARGET} == "minimal" ]] && BUILD_MINIMAL="yes"

	# create beta or stable
	if [[ "${BUILD_STABILITY}" == "${STABILITY}" ]]; then
		((n+=1))
		jobs=$(find /run/armbian | wc -l)		# count how much threads is already working

		if [[ $jobs -lt $MULTITHREAD ]]; then
			echo "Building in the back $buildtext $n / ${buildlistcount}"
			#(build_main) &
			[[ $KERNEL_ONLY != yes ]] && sleep $(( ( RANDOM % 10 )  + 1 ))
		else
			echo "Building $buildtext $n / ${buildlistcount}"
			#build_main
		fi
		echo "compile BOARD=$BOARD BRANCH=$BRANCH RELEASE=$RELEASE BUILD_DESKTOP=$BUILD_DESKTOP BUILD_MINIMAL=$BUILD_MINIMAL"
	fi

done < ${SRC}/config/targets.conf

